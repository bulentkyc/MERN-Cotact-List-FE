{"version":3,"sources":["pages/Auth.js","components/Card.js","pages/Contacts.js","pages/GetContact.js","components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["props","history","useHistory","className","onSubmit","e","preventDefault","console","log","data","email","target","value","pass","options","method","headers","body","JSON","stringify","nativeEvent","submitter","id","fetch","then","result","json","output","status","alert","message","localStorage","setItem","token","push","name","type","Card","contact","deleteContact","fullName","phone","address","avatar","editedContact","_id","useState","isEditable","setIsEditable","bgColor","setBgColor","editCardHandler","info","getAttribute","files","innerText","editCheckHandler","charCode","style","backgroundColor","data-id","onChange","src","onKeyPress","onBlur","contentEditable","onClick","finalForm","FormData","Object","keys","forEach","key","append","getItem","catch","err","Contacts","useEffect","form","setForm","contacts","setContacts","fillForm","field","newForm","deleteContactHandler","response","newList","filter","cards","length","map","bind","required","placeholder","Array","from","file","values","fromEntries","multiple","exact","activeClassName","to","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.20f1b95f.chunk.js","sourcesContent":["import './Auth.css';\nimport { useHistory } from \"react-router-dom\";\n\nexport default function(props) {\n    let history = useHistory();\n\n    let submitHandler = (e) => {\n        e.preventDefault();\n        console.log(e);\n\n        let data = {};\n        data.email = e.target[0].value;\n        data.pass = e.target[1].value;\n\n        let urlRegister = 'https://contactlist-io.herokuapp.com/auth/register';\n        let urlLogin = 'https://contactlist-io.herokuapp.com/auth/login';\n        let options = {\n            method:'POST', \n            headers: {\n                'Content-Type': 'application/json'\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body:JSON.stringify(data)\n        }\n\n        if (e.nativeEvent.submitter.id == \"register\") {\n            fetch(urlRegister, options).then(result=>result.json().then(output=>\n                {\n                    if (output.status == 'success') {\n                        alert('Congrats, you registered as well! Please login.')\n                    } else {\n                        alert(output.message)\n                    }\n                    console.log(output);\n                }));\n        } else if (e.nativeEvent.submitter.id == \"login\") {\n            fetch(urlLogin, options)\n            .then(result=>result.json()\n                .then(output=>{\n                    alert(output.message);\n                    console.log(output);\n                    localStorage.setItem('token',output.token);\n                    history.push('/contacts');\n\n/* \n                    if (output.status == 'success') {\n                        localStorage.setItem('token', output.token);\n                        //console.log(props.setIsLoggedIn);\n                        //props.setIsLoggedIn(true);\n                    } else {\n                        localStorage.removeItem('token');\n                    }\n                     */\n                }));\n        }\n    }\n\n    return (\n        <div className = \"wrapper\">\n            <form onSubmit = {submitHandler}>\n                <input name = \"email\" type = \"email\" />\n                <input  name = \"pass\" type = \"password\" />\n                <section>\n                    <input id = \"register\" type = \"submit\" value = \"Register\"/>\n                    <input id = \"login\" type = \"submit\" value = \"Login\"/>\n                </section>\n            </form>\n        </div>\n    )\n}\n","import \"./Cards.css\";\nimport {useState} from \"react\";\n\nconst Card = ({contact, deleteContact}) => {\n    const {fullName, email, phone, address, avatar} = contact;\n    const editedContact = {_id: contact._id};\n    //delete editedContact._id;\n    \n    const [isEditable, setIsEditable] = useState(false);\n    const [bgColor, setBgColor] = useState('white');\n\n    const editToggle = () => {\n        setIsEditable(!isEditable);\n        setBgColor(isEditable?'white':'lavender');\n    }\n\n    const editCardHandler = (e) => {\n        const id = e.target.getAttribute(\"data-id\");\n        let info;\n        if (id == 'file') {\n            info = e.target.files[0];\n        } else {\n            info = e.target.innerText;\n        }\n        /* console.log({id, info}); */\n        editedContact[id]=info;\n    }\n\n    const editCheckHandler = (e) => {\n        console.log(e)\n        if (e.charCode == 13) {\n            e.preventDefault();\n        }\n    }\n\n    const updateContactHandler = () => {\n        console.log(editedContact);\n\n        let finalForm = new FormData();\n\n        Object.keys(editedContact).forEach(key => {\n            finalForm.append(key, editedContact[key]) \n        })\n\n        const url = 'https://contactlist-io.herokuapp.com/contacts/update';\n        const options = {\n        method: 'POST',\n        headers: {\n            'x-auth-token': localStorage.getItem('token')\n        },\n        body: finalForm\n        }\n\n        fetch(url, options)\n        .then(data => data.json().then(output => {\n            if (output.status === 'success') {\n                setIsEditable(false);\n                setBgColor('green');\n            } else {\n                setBgColor('coral');\n            }\n        }))\n        .catch(err => setBgColor('coral'));\n\n    }\n\n\n    return(\n        <div className='card' style={{backgroundColor: bgColor}}>\n            {isEditable?<input data-id=\"file\" type=\"file\" onChange= {editCardHandler}/>:<img src = {\"https://contactlist-io.herokuapp.com/avatars/\" + avatar}/>}\n            <div data-id=\"fullName\"\n                onKeyPress={editCheckHandler}\n                onBlur = {editCardHandler}\n                contentEditable={isEditable}>\n                {fullName}\n            </div>\n            <div data-id=\"email\"\n                onKeyPress={editCheckHandler}\n                onBlur = {editCardHandler}\n                contentEditable={isEditable}>\n                {email}\n            </div>\n            <div data-id=\"phone\"\n                onKeyPress={editCheckHandler}\n                onBlur = {editCardHandler}\n                contentEditable={isEditable}>\n                {phone}\n            </div>\n            <div data-id=\"address\"\n                onKeyPress={editCheckHandler}\n                onBlur = {editCardHandler}\n                contentEditable={isEditable}>\n                {address}\n            </div>\n            <button onClick={editToggle}>✏️</button>\n            <button onClick={updateContactHandler}>💾</button>\n            <button onClick={deleteContact} >🗑️</button>\n        </div>\n    );\n}\n\nexport default Card;","import {useState, useEffect} from \"react\";\nimport Card from \"../components/Card\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction Contacts() {\n  \n  let history = useHistory();\n  \n  useEffect(() => {\n    if (!localStorage.getItem('token')) {\n      history.push('/auth');\n    }\n  });\n  \n  const headers = {\n    'Content-Type': 'application/json',\n    'x-auth-token': localStorage.getItem('token')\n  }\n\n  const [form, setForm] = useState({fullName:'', email: '', phone: '', address:''});\n  const [contacts, setContacts] = useState([{\n    _id:'1', \n    fullName:'test', \n    email: 't@t.com', \n    phone: '123456', \n    address:'test'}\n  ]);\n\n  \n\n  const fillForm = (e, field) => {\n    let newForm = {...form};\n    newForm[field] = e.target.value;\n    setForm(newForm);\n  }\n\n  const formSubmitHandler = (e) => {\n    e.preventDefault();\n\n    let finalForm = new FormData();\n    finalForm.append('fullName', form.fullName) \n    finalForm.append('email', form.email) \n    finalForm.append('phone', form.phone) \n    finalForm.append('address', form.address) \n    finalForm.append('file', e.target[4].files[0])\n    \n    const url = 'https://contactlist-io.herokuapp.com/contacts/new';\n    const options = {\n      method: 'POST',\n      headers: {\n        'x-auth-token': localStorage.getItem('token')\n      },\n      body: finalForm\n    }\n\n    fetch(url, options)\n    .then(data => data.json().then(output => setContacts([...contacts, output])));\n  }\n\n  useEffect(() => {\n    const url = 'https://contactlist-io.herokuapp.com/contacts/all';\n    const options = {\n      headers\n    }\n    \n    fetch(url, options).then(data => data.json().then(output => {\n      if (output.status == 'success') {\n        setContacts(output.data);\n      } else {\n        console.log(output.message);\n      }\n      \n    }));\n  }, []);\n  \n  const deleteContactHandler = (id) => {\n    const url = 'https://contactlist-io.herokuapp.com/contacts/'+id;\n    const options = {\n      method: 'DELETE',\n      headers\n    }\n\n    fetch(url, options)\n    .then(response => response.json().then(output => {\n      \n      //\n      if (output.status === 'success') {\n        alert(output.message);\n        let newList = contacts.filter(contact => {\n          if (contact._id != output.data) {\n            return contact;\n          }\n        });\n        setContacts(newList);\n      } else {\n        alert(`There's an error. For details please check the console.`);\n        console.log(output.message);\n      }\n      \n    }))\n    .catch(err=>{\n      alert(err)\n    });\n  }\n\n\n  let cards = [];\n\n  if (typeof(contacts)=='object' && contacts.length > 0) {\n    cards = contacts.map(contact => <Card \n      key = {contact['_id']}\n      contact = {contact}\n      deleteContact = {deleteContactHandler.bind(this,contact['_id'])}\n      />);\n  } \n  \n\n  /* console.log(cards, contacts) */\n  return (\n    <div className=\"App\">\n      <form className=\"form\" onSubmit = {formSubmitHandler}>\n        <input required placeholder=\"Full name\" value = {form.fullName} onChange = {(e) => fillForm(e, 'fullName')}/>\n        <input type = \"email\" placeholder=\"Email\" value = {form.email} onChange = {(e) => fillForm(e, 'email')}/>\n        <input type = \"tel\" placeholder=\"Phone number\" value = {form.phone} onChange = {(e) => fillForm(e, 'phone')}/>\n        <input placeholder=\"Address\" value = {form.address} onChange = {(e) => fillForm(e, 'address')}/>\n        <input type = \"file\"/>\n        <button>Create Contact</button>\n      </form>\n\n      <section className=\"contact-list\">\n        {cards}\n      </section>\n    </div>\n  );\n}\n\nexport default Contacts;\n","import \"./GetContact.css\"\n\nexport default () => {\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        console.log(e);\n\n/*      let data = {};\n        data.fullName = e.target[0].value;\n        data.email = e.target[1].value;\n        data.phone = e.target[2].value;\n        data.message = e.target[3].value;\n */\n        let data = new FormData();\n\n        data.append('fullName', e.target[0].value);\n        data.append('email', e.target[1].value);\n        data.append('phone', e.target[2].value);\n        data.append('message', e.target[3].value);\n\n        Array.from(e.target[4].files).forEach(file => {\n            data.append('attachs', file);\n        });\n\n        console.log(1,data);\n\n        for (var value of data.values()) {\n            console.log(value);\n        }\n\n        console.log(3,Object.fromEntries(data));\n\n        let url = 'https://contactlist-io.herokuapp.com/get-contact';\n\n        let options = {\n            method:'POST',\n            body:data\n        }\n        \n        fetch(url, options).then(result=>\n            {\n                console.log(result)\n                result.json().then(output=>\n            {\n                if (output.status == 'success') {\n                    alert(output.message)\n                } else {\n                    alert(output.message)\n                }\n                console.log(output);\n            })}\n        );\n    }\n\n    return (\n        <div id=\"get-contact\">\n            <form className=\"contact-form\" onSubmit={submitHandler}>\n                <input type=\"text\" placeholder=\"Full Name\"></input>\n                <input type=\"email\" placeholder=\"Email\"></input>\n                <input type=\"tel\" placeholder=\"Phone\"></input>\n                <textarea type=\"text\" placeholder=\"Message\"></textarea>\n                <input type=\"file\" multiple></input>\n                <button>Get Contact</button>\n            </form>\n        </div>\n    )\n}\n\n\n//Hello World This is trial #1","import {NavLink} from 'react-router-dom';\nimport './Navbar.css';\n\nexport default function (props) {\n    return (\n        <nav>\n            <NavLink\n                exact\n                className = \"nav-item\" \n                activeClassName=\"active\"\n                to = \"/\"\n            >Home</NavLink>\n\n            <NavLink\n                exact\n                className = \"nav-item\"\n                activeClassName=\"active\" \n                to = \"/contacts\"\n            >Contacts</NavLink>\n\n            <NavLink\n                exact\n                className = \"nav-item\"\n                activeClassName=\"active\" \n                to = \"/get-contact\"\n            >Get Contact</NavLink>\n        </nav>\n    );\n}","import './App.css';\nimport Auth from './pages/Auth';\nimport Contacts from './pages/Contacts';\nimport GetContact from './pages/GetContact';\nimport Navbar from './components/Navbar';\n\nimport { Switch,Route } from \"react-router-dom\";\n\n\n\nfunction App() {\n  return (\n    <div>\n    <Navbar/>\n    <Switch>\n      <Route path=\"/auth\">\n        <Auth />\n      </Route>\n      <Route path=\"/contacts\">\n        <Contacts />\n      </Route>\n      <Route path=\"/get-contact\">\n        <GetContact />\n      </Route>\n      <Route path=\"/\">\n        <Auth />\n      </Route>\n    </Switch>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}